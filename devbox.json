{
  "$schema": "https://raw.githubusercontent.com/jetpack-io/devbox/main/.schema/devbox.schema.json",
  "packages": [
    "nodejs@22",
    "python@3.12",
    "python312Packages.pip@latest",
    "git@latest",
    "gh@latest",
    "jq@latest",
    "yq@latest",
    "ripgrep@latest",
    "fd@latest",
    "bat@latest",
    "fzf@latest",
    "tree@latest",
    "curl@latest",
    "httpie@latest",
    "typescript@latest",
    "postgresql_16@latest",
    "stripe-cli@latest",
    "supabase-cli@latest",
    "libwebp@latest",
    "librsvg@latest",
    "pkg-config@latest",
    "cairo@latest",
    "imagemagick@latest",
    "zlib@latest",
    "clang@latest",
    "ninja@latest"
  ],
  "shell": {
    "init_hook": [
      "# Cross-platform compatibility for tools",
      "if command -v fdfind >/dev/null 2>&1 && ! command -v fd >/dev/null 2>&1; then alias fd=fdfind; fi",
      "if command -v batcat >/dev/null 2>&1 && ! command -v bat >/dev/null 2>&1; then alias bat=batcat; fi",
      "",
      "# Essential aliases",
      "alias ll='ls -alF'",
      "",
      "# Node.js memory settings",
      "export NODE_OPTIONS='--max-old-space-size=4096'",
      "",
      "# Set npm prefix to local directory to avoid permission issues",
      "export NPM_CONFIG_PREFIX=\"$HOME/.npm-global\"",
      "export PATH=\"$HOME/.npm-global/bin:$PATH\"",
      "mkdir -p \"$HOME/.npm-global\"",
      "",
      "# Python virtual environment setup",
      "if [ ! -d venv ]; then",
      "  echo 'Creating Python virtual environment...'",
      "  python3 -m venv venv",
      "fi",
      "source venv/bin/activate",
      "",
      "# Check system architecture and OS",
      "ARCH=$(uname -m)",
      "OS=$(uname -s)",
      "# Detect specific Linux distribution if on Linux",
      "if [ \"$OS\" = \"Linux\" ]; then",
      "  if [ -f /etc/os-release ]; then",
      "    . /etc/os-release",
      "    DISTRO=$ID",
      "    DISTRO_VERSION=$VERSION_ID",
      "  else",
      "    DISTRO=\"unknown\"",
      "    DISTRO_VERSION=\"unknown\"",
      "  fi",
      "elif [ \"$OS\" = \"Darwin\" ]; then",
      "  DISTRO=\"macos\"",
      "  DISTRO_VERSION=$(sw_vers -productVersion)",
      "fi",
      "echo \"Detected: $OS ($DISTRO $DISTRO_VERSION) on $ARCH\"",
      "",
      "# ARM-specific notice",
      "if [ \"$ARCH\" = \"aarch64\" ] || [ \"$ARCH\" = \"arm64\" ]; then",
      "  # One-time cache clear if needed (use environment variable)",
      "  if [ \"$CLEAR_PIP_CACHE\" = \"1\" ]; then",
      "    echo '  Clearing pip cache (CLEAR_PIP_CACHE=1 set)...'",
      "    pip cache purge 2>/dev/null || true",
      "  fi",
      "fi",
      "",
      "# Determine which packages to check based on architecture",
      "if [ \"$ARCH\" = \"x86_64\" ] || [ \"$ARCH\" = \"amd64\" ]; then",
      "  # AMD64: Include backend Python packages for local development/testing",
      "  # Note: supabase Python package removed (use supabase-cli instead)",
      "  PACKAGES_TO_CHECK=\"requests torch vllm transformers accelerate modelscope pillow boto3 FlagEmbedding cairosvg psutil\"",
      "  echo 'Checking backend Python dependencies (AMD64 architecture)...'",
      "else",
      "  # ARM: Skip backend Python packages entirely",
      "  # Backend runs on Zuplo cloud, not locally on ARM dev machines",
      "  # Frontend development doesn't need these packages",
      "  PACKAGES_TO_CHECK=\"\"",
      "  echo 'Skipping backend Python packages on ARM (backend runs on Zuplo cloud)'",
      "  echo '  ℹ️  For frontend development, no Python packages are required.'",
      "  echo '  ℹ️  Backend APIs are accessed via Zuplo gateway, not run locally.'",
      "fi",
      "",
      "MISSING_DEPS=false",
      "MISSING_LIST=\"\"",
      "",
      "# Configure Cairo library path FIRST before checking packages",
      "configure_cairo() {",
      "  # Try to find Cairo library in Nix store first",
      "  local cairo_lib=$(find /nix/store -name 'libcairo.so.2' 2>/dev/null | head -1 | xargs dirname 2>/dev/null)",
      "  if [ -n \"$cairo_lib\" ]; then",
      "    export LD_LIBRARY_PATH=\"$cairo_lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}\"",
      "    echo \"  ✓ Cairo library configured for SVG support\"",
      "    return 0",
      "  fi",
      "}",
      "configure_cairo",
      "",
      "# Check each critical dependency",
      "for pkg in $PACKAGES_TO_CHECK; do",
      "  # Handle special cases for import names",
      "  import_name=$pkg",
      "  if [ \"$pkg\" = \"pillow\" ]; then",
      "    import_name=\"PIL\"",
      "  elif [ \"$pkg\" = \"FlagEmbedding\" ]; then",
      "    import_name=\"FlagEmbedding\"",
      "  elif [ \"$pkg\" = \"cairosvg\" ]; then",
      "    import_name=\"cairosvg\"",
      "  elif [ \"$pkg\" = \"boto3\" ]; then",
      "    import_name=\"boto3\"",
      "  elif [ \"$pkg\" = \"psutil\" ]; then",
      "    import_name=\"psutil\"",
      "  fi",
      "  # Check if package can be imported",
      "  if python3 -c \"import $import_name\" >/dev/null 2>&1; then",
      "    : # Package found, do nothing",
      "  else",
      "    echo \"  Missing: $pkg\"",
      "    MISSING_LIST=\"$MISSING_LIST $pkg\"",
      "    MISSING_DEPS=true",
      "  fi",
      "done",
      "",
      "# Install missing dependencies",
      "if [ \"$MISSING_DEPS\" = true ]; then",
      "  echo \"Installing missing dependencies:$MISSING_LIST\"",
      "  # Install torch first if needed",
      "  if echo \"$MISSING_LIST\" | grep -q \"torch\"; then",
      "    if [ \"$OS\" = \"Darwin\" ] && [ \"$ARCH\" = \"arm64\" ]; then",
      "      # macOS Apple Silicon: Install PyTorch with MPS support",
      "      pip install -q torch torchvision torchaudio 2>/dev/null",
      "    elif [ \"$ARCH\" = \"x86_64\" ] || [ \"$ARCH\" = \"amd64\" ]; then",
      "      if [ \"$OS\" = \"Linux\" ]; then",
      "        # Linux AMD64: Install PyTorch with CUDA support",
      "        pip install -q torch torchvision --index-url https://download.pytorch.org/whl/cu121 2>/dev/null",
      "      else",
      "        # macOS Intel or other x86_64: CPU-only",
      "        pip install -q torch torchvision 2>/dev/null",
      "      fi",
      "    else",
      "      # Other ARM (Linux ARM, etc): Install CPU-only PyTorch",
      "      pip install -q torch torchvision 2>/dev/null",
      "    fi",
      "    # Remove torch from the list since we installed it",
      "    MISSING_LIST=$(echo \"$MISSING_LIST\" | sed 's/torch//g')",
      "  fi",
      "  # Install all other missing packages (excluding those already handled)",
      "  FILTERED_LIST=\"\"",
      "  for pkg in $MISSING_LIST; do",
      "    if [ -n \"$pkg\" ] && [ \"$pkg\" != \"torch\" ]; then",
      "      # Skip vllm on ARM architectures",
      "      if [ \"$pkg\" = \"vllm\" ] && [ \"$ARCH\" != \"x86_64\" ] && [ \"$ARCH\" != \"amd64\" ]; then",
      "        echo \"  Skipping vllm (not supported on ARM)\"",
      "      else",
      "        FILTERED_LIST=\"$FILTERED_LIST $pkg\"",
      "      fi",
      "    fi",
      "  done",
      "  if [ -n \"$FILTERED_LIST\" ]; then",
      "    # Install packages with better error handling and verbose output for failures",
      "    echo \"  Installing: $FILTERED_LIST\"",
      "    # Use --no-binary :all: for problematic packages on ARM to force compilation from source",
      "    if echo \"$FILTERED_LIST\" | grep -q \"FlagEmbedding\"; then",
      "      # FlagEmbedding often needs to be built from source on ARM",
      "      pip install --no-binary :all: $FILTERED_LIST 2>&1 | grep -v \"Requirement already satisfied\" || true",
      "    else",
      "      pip install $FILTERED_LIST 2>&1 | grep -v \"Requirement already satisfied\" || true",
      "    fi",
      "  fi",
      "else",
      "  echo '  ✓ All dependencies installed'",
      "fi",
      "",
      "# Note: FlashAttention and xFormers are x86_64-specific optimizations",
      "# On AMD64: vLLM will use xFormers backend for good performance",
      "# On ARM: Standard attention mechanisms will be used automatically",
      "",
      "# Configure CUDA for PyTorch (only on x86_64/amd64 with CUDA available)",
      "if [ \"$ARCH\" = \"x86_64\" ] || [ \"$ARCH\" = \"amd64\" ]; then",
      "  if [ -d /usr/local/cuda-12.6 ]; then",
      "    export CUDA_HOME=/usr/local/cuda-12.6",
      "    export PATH=/usr/local/cuda-12.6/bin:$PATH",
      "    export LD_LIBRARY_PATH=/usr/local/cuda-12.6/lib64${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}",
      "    # Add WSL NVIDIA driver libs only if on WSL",
      "    if [ -d /usr/lib/wsl/lib ]; then",
      "      export LD_LIBRARY_PATH=/usr/lib/wsl/lib:$LD_LIBRARY_PATH",
      "    fi",
      "  fi",
      "fi",
      "",
      "# Configure compilation environment for native extensions (only on x86_64)",
      "if [ \"$ARCH\" = \"x86_64\" ] || [ \"$ARCH\" = \"amd64\" ]; then",
      "  echo 'Configuring compiler environment for native extensions...'",
      "  # Find zlib.h specifically from zlib package, not nodejs",
      "  ZLIB_H_PATH=$(find /nix/store -path '*/zlib-*/include/zlib.h' -type f 2>/dev/null | head -1)",
      "  if [ -n \"$ZLIB_H_PATH\" ]; then",
      "    ZLIB_INCLUDE=$(dirname \"$ZLIB_H_PATH\")",
      "    ZLIB_LIB=$(dirname \"$ZLIB_INCLUDE\")/lib",
      "    export CFLAGS=\"${CFLAGS:+$CFLAGS }-I$ZLIB_INCLUDE\"",
      "    export LDFLAGS=\"${LDFLAGS:+$LDFLAGS }-L$ZLIB_LIB\"",
      "    export C_INCLUDE_PATH=\"$ZLIB_INCLUDE${C_INCLUDE_PATH:+:$C_INCLUDE_PATH}\"",
      "    export LIBRARY_PATH=\"$ZLIB_LIB${LIBRARY_PATH:+:$LIBRARY_PATH}\"",
      "    export CPPFLAGS=\"${CPPFLAGS:+$CPPFLAGS }-I$ZLIB_INCLUDE\"",
      "    echo \"  ✓ Found zlib headers at: $ZLIB_INCLUDE\"",
      "  else",
      "    # Try pkg-config as fallback",
      "    if command -v pkg-config >/dev/null 2>&1 && pkg-config --exists zlib; then",
      "      export CFLAGS=\"${CFLAGS:+$CFLAGS }$(pkg-config --cflags zlib)\"",
      "      export LDFLAGS=\"${LDFLAGS:+$LDFLAGS }$(pkg-config --libs zlib)\"",
      "      echo \"  ✓ Configured zlib via pkg-config\"",
      "    fi",
      "  fi",
      "fi",
      "",
      "# ARM-specific compiler optimizations",
      "if [ \"$ARCH\" = \"aarch64\" ] || [ \"$ARCH\" = \"arm64\" ]; then",
      "  # Add ARM-specific compiler flags for better compatibility",
      "  export ARCHFLAGS=\"-arch arm64\"",
      "  # Ubuntu ARM: Also check system paths",
      "  if [ \"$DISTRO\" = \"ubuntu\" ] && [ -f /usr/include/zlib.h ]; then",
      "    export C_INCLUDE_PATH=\"/usr/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH}\"",
      "    export LIBRARY_PATH=\"/usr/lib/aarch64-linux-gnu${LIBRARY_PATH:+:$LIBRARY_PATH}\"",
      "  fi",
      "fi",
      "",
      "# Configure pip to handle SSL issues",
      "export PIP_TRUSTED_HOST=\"pypi.org pypi.python.org files.pythonhosted.org\"",
      "export PIP_CERT=\"\"",
      "",
      "# Always ensure cairosvg is installed with proper Cairo library path",
      "if ! python3 -c \"import cairosvg\" >/dev/null 2>&1; then",
      "  echo 'Installing cairosvg with Cairo library support...'",
      "  pip install --force-reinstall cairosvg 2>/dev/null || true",
      "fi",
      "",
      "# Install Python packages if requirements.txt exists",
      "if [ -f requirements.txt ]; then",
      "  pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org -q -r requirements.txt 2>/dev/null || echo 'Note: Some pip packages may have failed to install'",
      "fi",
      "",
      "# Install npm tools locally if not present",
      "# Check for actual binary names (zuplo CLI creates 'zup' not 'zuplo')",
      "if [ ! -e \"$HOME/.npm-global/bin/wrangler\" ]; then",
      "  echo 'Installing wrangler locally...'",
      "  npm install --prefix \"$HOME/.npm-global\" -g wrangler 2>/dev/null || echo 'wrangler may need to be installed separately'",
      "fi",
      "",
      "if [ ! -e \"$HOME/.npm-global/bin/zup\" ]; then",
      "  echo 'Installing zuplo CLI locally...'",
      "  npm install --prefix \"$HOME/.npm-global\" -g @zuplo/cli 2>/dev/null || echo 'zuplo CLI may need to be installed separately'",
      "fi",
      "",
      "# Configure Playwright environment",
      "# Use user's home directory for Playwright browsers",
      "export PLAYWRIGHT_BROWSERS_PATH=\"$HOME/.cache/playwright\"",
      "",
      "# Check if Playwright browsers need installation (dynamic version detection)",
      "if [ -f \"./scripts/install-playwright-browsers.sh\" ]; then",
      "  # Let the script handle version detection dynamically",
      "  PLAYWRIGHT_CHECK=$(bash ./scripts/install-playwright-browsers.sh --check 2>/dev/null)",
      "  if [ \"$PLAYWRIGHT_CHECK\" = \"missing\" ]; then",
      "    echo '🎭 Installing Playwright browsers (first-time setup)...'",
      "    bash ./scripts/install-playwright-browsers.sh >/dev/null 2>&1 || echo '  ⚠️  Playwright browser installation failed. Run: npm run playwright:install'",
      "  fi",
      "fi",
      "",
      "# Auto-detect GPU and configure LLM backend (skip on ARM for now)",
      "if [ \"$ARCH\" = \"x86_64\" ] || [ \"$ARCH\" = \"amd64\" ]; then",
      "  echo 'Detecting hardware configuration for LLM inference...'",
      "  # Find the project root - prefer current directory if devbox.json exists here",
      "  if [ -f \"./devbox.json\" ]; then",
      "    PROJECT_ROOT=\".\"",
      "  else",
      "    PROJECT_ROOT=\"$(dirname \"$(find . -maxdepth 3 -name devbox.json -type f 2>/dev/null | head -1)\" 2>/dev/null)\"",
      "    if [ -z \"$PROJECT_ROOT\" ]; then PROJECT_ROOT=\".\"; fi",
      "  fi",
      "  if [ -f \"$PROJECT_ROOT/backend/scripts/detect-gpu-config.sh\" ]; then",
      "    bash \"$PROJECT_ROOT/backend/scripts/detect-gpu-config.sh\" > /dev/null 2>&1",
      "    if [ -f \"$PROJECT_ROOT/backend/scripts/auto-config.json\" ]; then",
      "      # Parse the configuration",
      "      CONFIG_FILE=\"$PROJECT_ROOT/backend/scripts/auto-config.json\"",
      "      BACKEND=$(python3 -c \"import json; config=json.load(open('$CONFIG_FILE')); print(config.get('backend', 'unknown'))\" 2>/dev/null || echo 'unknown')",
      "      MODEL=$(python3 -c \"import json; config=json.load(open('$CONFIG_FILE')); print(config.get('model', 'unknown'))\" 2>/dev/null || echo 'unknown')",
      "      QUANTIZATION=$(python3 -c \"import json; config=json.load(open('$CONFIG_FILE')); print(config.get('quantization', 'None'))\" 2>/dev/null || echo 'None')",
      "      echo \"  ✓ Hardware detected: Backend=$BACKEND, Model=$(echo $MODEL | rev | cut -d'/' -f1 | rev)\"",
      "      if [ \"$QUANTIZATION\" != \"None\" ] && [ \"$QUANTIZATION\" != \"null\" ]; then",
      "        echo \"    Quantization: $QUANTIZATION\"",
      "      fi",
      "    else",
      "      echo '  ⚠ Hardware detection completed but no configuration generated'",
      "    fi",
      "  else",
      "    echo '  ℹ GPU detection script not found. Run from project root to enable auto-configuration.'",
      "  fi",
      "else",
      "  # ARM-specific configuration",
      "  PROJECT_ROOT=\".\"",
      "fi",
      "",
      "echo ''",
      "echo '🚀 iCraftStories Development Environment Ready'",
      "echo \"Node version: $(node -v)\"",
      "echo \"Python version: $(python3 --version)\"",
      "echo 'Virtual env: venv (activated)'",
      "echo 'NPM global packages: $HOME/.npm-global'",
      "",
      "# Show LLM server info if configured (x86_64 only - vLLM doesn't support ARM)",
      "if [ \"$ARCH\" = \"x86_64\" ] || [ \"$ARCH\" = \"amd64\" ]; then",
      "  if [ -f \"$PROJECT_ROOT/backend/scripts/auto-config.json\" ]; then",
      "    echo ''",
      "    echo '💡 LLM configuration detected. Available vLLM scripts (x86_64 only):'",
      "    if [ -f \"$PROJECT_ROOT/backend/scripts/vllm_manager.py\" ]; then",
      "      echo '   python3 backend/scripts/vllm_manager.py  # vLLM manager'",
      "    fi",
      "    if [ -f \"$PROJECT_ROOT/backend/scripts/process-images-vllm-s3.py\" ]; then",
      "      echo '   python3 backend/scripts/process-images-vllm-s3.py  # Process images with vLLM'",
      "    fi",
      "  fi",
      "elif [ \"$ARCH\" = \"aarch64\" ] || [ \"$ARCH\" = \"arm64\" ]; then",
      "  echo ''",
      "  echo '💡 Development on ARM:'",
      "  echo '   • Frontend development: Fully supported'",
      "  echo '   • Backend development: Uses Zuplo cloud (no local Python needed)'",
      "  echo '   • API testing: Use zuplo CLI or curl/httpie'",
      "  if [ \"$OS\" = \"Darwin\" ]; then",
      "    echo ''",
      "    echo '   macOS ARM specific:'",
      "    echo '   • Vite dev server: Works natively'",
      "    echo '   • Node.js: Runs with full performance'",
      "  else",
      "    echo ''",
      "    echo '   Ubuntu ARM specific:'",
      "    echo '   • All frontend tools work natively'",
      "    echo '   • Use npm run dev:frontend for local development'",
      "  fi",
      "fi",
      "",
      "# Show image processing pipeline commands based on architecture",
      "if [ \"$ARCH\" = \"x86_64\" ] || [ \"$ARCH\" = \"amd64\" ]; then",
      "  echo ''",
      "  echo '🖼️  Image Processing Pipeline (D1-based):'",
      "  echo '   cd backend/scripts'",
      "  echo ''",
      "  echo '   # 1️⃣  Initialize D1 Database (first time only):'",
      "  echo '   ./init-d1-database.sh             # Create D1 database and categories'",
      "  echo ''",
      "  echo '   # 2️⃣  Sync Images from R2 to D1:'",
      "  echo '   python3 sync-r2-to-d1.py           # Scan R2 and populate D1 database'",
      "  echo ''",
      "  echo '   # 3️⃣  Process Images with AI (includes thumbnail generation):'",
      "  echo '   python3 process-images-vllm-s3.py  # Categorize with Qwen2.5-VL + thumbnails'",
      "  echo ''",
      "  echo '   # 4️⃣  Generate Embeddings for Search:'",
      "  echo '   python3 generate-bge-m3-embeddings.py  # Create multilingual embeddings'",
      "  echo ''",
      "  echo '   # 5️⃣  Sync Everything to Supabase:'",
      "  echo '   python3 sync-d1-to-supabase.py     # Deploy categories & images to production'",
      "  echo ''",
      "  echo '   # Optional: Convert local images to WebP and upload:'",
      "  echo '   python3 convert-and-upload-to-r2.py /path/to/images'",
      "  echo ''",
      "  echo '📚 For more info: cat backend/scripts/README_IMAGE_PIPELINE.md'",
      "else",
      "  echo ''",
      "  echo '📝 Note: Backend image processing pipeline is not available on ARM architecture.'",
      "  echo '   These Python scripts require backend dependencies that are only installed on x86_64.'",
      "  echo '   Use an x86_64 machine or cloud instance for image processing tasks.'",
      "fi"
    ]
  },
  "env": {
    "NODE_ENV":    "development",
    "FORCE_COLOR": "1",
    "HF_HOME": "/home/g/hf-cache",
    "HUGGINGFACE_HUB_CACHE": "/home/g/hf-cache/hub",
    "VLLM_WORKER_MULTIPROC_METHOD": "spawn"
  }
}
